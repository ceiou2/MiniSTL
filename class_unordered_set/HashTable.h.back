// HashTable.h
#pragma once
#ifndef HASHTABLE_H
#define HASHTABLE_H

#include <utility>
#include "MiniVector.h" //hash表底层以vector实现

//表项，使用链表节点
template<typename K, typename T>
class HashNode
{
public:
    T data;
    HashNode* next;
    // 构造函数
    HashNode() {}
    HashNode(T d): data(d) {}
};

//使用开散列，vector+链表的方式
template<typename K, typename T, typename KeyOfT>
class HashTable
{
private:
    typedef HashNode<K, T> Node;
    typedef size_t size_type;
    typedef K key_type;
    typedef T value_type;

    vector<Node*> ht;
    size_type size;
    KeyOfT kot; //仿函数，用于获取T data中的K key
    //=======辅助功能函数模块=======
    // 清空所有vector上的链表（清空桶
    void release()
    {
        for (size_type i = 0; i < ht.size(); ++i) {
            if (ht[i]) {
                release_list(ht[i]);
                ht[i] = nullptr;
            }
        }
        size = 0;
    }
    //清空一个桶（链表
    void release_list(Node* cur)
    {
        if (!cur)
            return;
        release_list(cur->next);
        delete (cur);
    }

    //按照hash方式插入节点，可以一次输入一个链表，从cur>>-->>nullptr,根据链表特性，从尾部到头部插入
    //调用该函数前需确保key不重复
    void hash_in(Node* cur)
    {
        if (!cur)
            return;
        hash_in(cur->next);
        // 找到hash位置并插入（头插
        size_type index = hash(cur);
        cur->next = ht[index];
        ht[index] = cur;
    }

    //获得节点的key对应的hash值
    size_type hash(Node* cur)
    {
        key_type key = kot(cur->data);
        return key % ht.size();
    }

    size_type hash(const T& data)
    {
        key_type key = kot(data);
        return key % ht.size();
    }

public:
    //构造函数
    HashTable(): size(0)
    {
        ht.resize(10, nullptr);
    }

    //析构函数
    ~HashTable()
    {
        release(); //清空所有桶
    }

    // 插入函数 成功返回插入节点的指针;失败返回nullptr
    Node* insert(T data)
    {
        //检测是否需要扩容：装载因子==1时扩容（size==ht.size()）
        if (size == ht.size()) {
            //扩容
            size_type new_size = 2 * size;
            vector<Node*> ori_ht(new_size); //开辟新空间
            swap(ori_ht, ht); // ori_ht存放原hashtable，ht存放新hashtable
            // 将hashtable里的所有节点按照data的hash转移到newhashtable上
            for (size_type i = 0; i < ori_ht.size(); ++i) {
                if (ori_ht[i]) {
                    hash_in(ori_ht[i]);
                }
            }
        }
        if (find(data)) { // data已经存在
            return nullptr;
        }
        ++size;
        Node* s = new Node(data);
        hash_in(s);
        return s;
    }

    //查找函数
    Node* find(T data)
    {
        //计算hash
        Node* cur = ht[hash(data)];
        while (cur) {
            if (cur->data == data)
                return cur;
            cur = cur->next;
        }
        return nullptr;
    }

    //删除函数
    bool erase(T data)
    {
        Node* cur = find(data);
        if (!cur) // data不存在
            return false;
        size_type index = hash(cur); //找到cur的hash
        if (ht[index] == cur) {      //桶里第一个就是cur的情况
            ht[index] = cur->next;

        } else { // cur不是第一个节点
            Node* pre = ht[index];
            while (pre->next != cur) { //找到cur的前一个节点
                pre = pre->next;
            }
            pre->next = cur->next;
        }
        delete cur;
        --size;
        return true;
    }

    //======功能函数模块======
    size_type get_size()
    {
        return size;
    }

    void clear()
    { //清空所有桶
        release();
    }
};

#endif
